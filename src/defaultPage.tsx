import { ReactElement } from 'react';
import { MarkdownToHtml } from '@/shared/ReactMarkdown';

export const DefaultPage = (): ReactElement => {
  return (
    <div>
      <MarkdownToHtml
        mode="dev"
        body={`
# Dicas para formatar seu HTML   

## Markdown de c√≥digo em coment√°rios  

Markdown de c√≥digo tem algumas limita√ß√µes em rela√ß√£o ao markdown padr√£o, por exemplo, coment√°rios podem estar espa√ßados, exemplo:

    if(codigo) {
      /* doc  
      sua documeta√ß√£o aqui  
        coment√°rios em niveis incosinstentes  
      */
    }

No markdown padr√£o, esse espa√ßamento indicaria um c√≥digo de programa√ß√£o, e para evitar essa inconsist√™ncia, o markdown em coment√°rio tem todas as linhas a esquerda removidas, ou seja, em coment√°rios os espa√ßos a esquerda s√£o removidos, e consequentemente os c√≥digos em coment√°rios baseado em espa√ßamento n√£o ir√£o funcionar.

Para fazer c√≥digo em coment√°rio, use o \`\`\`, exemplo:

    \`\`\`py
    print("seu codigo aqui");  
    \`\`\`

Al√©m de usar o \`\`\`, informe a linguagem usada, como \`ts\`, \`py\`, \`js\`, \`bash\` ou outras, sem isso a formata√ß√£o n√£o ficar√° legal


## Dev blocks

Nas documenta√ß√µes voc√™ pode marcar um trecho de c√≥digo como sendo de dev, isso ir√° mostrar esse c√≥digo somente no modo de dev (üßë‚Äçüíª), mas ir√° ocultar no modo de produtos ‚≠ê.

Isso √© util para esconder detalhes como tags, ids, requests, endpoints e coisas techs que podem confundir produtos.

> Lembre-se, fa√ßa a doc para atender a TECH, e ser simples para produtos, assim a gente centraliza tudo.

Para iniciar um bloco de dev, basta adicionar esse coment√°rio

\`\`\`ts
documenta√ß√£o para todos aqui

<!-- dev:start -->
coisas de dev aqui
<!-- dev:end -->

continua documenta√ß√£o para todos
\`\`\`

Em arquivos markdown no \`vscode\` voc√™ pode usar o \`CTRL + /\`, isso ir√° adicionar um coment√°rio no markdown.
`}
      />
    </div>
  );
};
